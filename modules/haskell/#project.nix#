{ compiler ? "default", doBenchmark ? false }:

let

  overlays = [(fixedpoint: pkgs: {
             haskellPackages = pkgs.haskellPackages.extend ( hfixedpoint: hpkgs: {
                 myproject = (hself.callPackage ./default.nix {}).overrideScope (pself: psuper: {
                     QuickCheck = pself.QuickCheck_2_9;
                   });
                 QuickCheck_2_9 = hself.callPackage ./quickcheck.nix { };
               };
             );
           };
         )];

  pkgs = (import <nixpkgs> { inherit overlays; }).pkgs;

  f = import ./default.nix;

  haskellPackages = if compiler == "default"
                       then pkgs.haskellPackages
                       else pkgs.haskell.packages.${compiler};

  variant = if doBenchmark then pkgs.haskell.lib.doBenchmark else pkgs.lib.id;

  drv = variant (haskellPackages.callPackage f { development = true;});

in

{myproject = if pkgs.lib.inNixShell then drv.env else drv;}